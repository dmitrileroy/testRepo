/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Popover, Avatar, Alert, Tooltip } from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { styled } from '@mui/material/styles';
import { Frame1Props } from './types';
import useFrame1 from './useFrame1';
 
const Frame11: any = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  width: `818px`,  
  height: `562px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  overflow: `hidden`,  
});
  
const Frame2: any = styled("div")({  
  backgroundColor: `rgba(255, 202, 202, 1)`,  
  display: `flex`,  
  position: `absolute`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  width: `319px`,  
  height: `508px`,  
  left: `25px`,  
  top: `30px`,  
  overflow: `hidden`,  
});
  
const Rectangle1: any = styled("div", {
    shouldForwardProp: prop => !["data"].includes(prop.toString())
  })(({ data }: any) =>({  
  backgroundColor: `rgba(217, 217, 217, 1)`,  
  width: `100%`,  
  height: `130px`,  
  position: `absolute`,  
  left: `371px`,  
  top: `30px`,  
  backgroundImage: data.hello,  
  cursor: `pointer`,  
}));
  
const HelloWorld: any = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Inter`,  
  fontWeight: `400`,  
  fontSize: `20px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  position: `absolute`,  
  left: `371px`,  
  top: `178px`,  
});
  
const Frame3: any = styled("div", {
    shouldForwardProp: prop => !["props"].includes(prop.toString())
  })(({ props }: any) =>({  
  boxShadow: `10px 4px 3px rgba(193, 21, 21, 1)`,  
  border: props.border,  
  boxSizing: `border-box`,  
  display: `flex`,  
  position: `absolute`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  width: `337px`,  
  height: `137px`,  
  left: `380px`,  
  top: `227px`,  
  overflow: `hidden`,  
}));
  
const Avatar1: any = styled(Avatar)({  
  position: `absolute`,  
  left: `8px`,  
  top: `11px`,  
  width: `40px`,  
  height: `40px`,  
});
  
const AlertFilled: any = styled(Alert)({  
  width: `320px`,  
  position: `absolute`,  
  left: `380px`,  
  top: `389px`,  
});
  
const ButtonContained: any = styled(LoadingButton)({  
  position: `absolute`,  
  left: `380px`,  
  top: `490px`,  
});
 
function Frame1(props: Frame1Props): JSX.Element {
  const {data, fns} = useFrame1();
  return (
    <Frame11 >
       <Frame2 >
       </Frame2>
       <Rectangle1 onClick={fns.onClick} data={data} >
       </Rectangle1>
       <HelloWorld >
         {`Hello World`}
           </HelloWorld>
       <Frame3 props={props} >
         <Popover  
           marginThreshold={0}
           anchorEl={props.anchorEL}
           anchorOrigin={{vertical: 'top', horizontal: 'left'}}
           transformOrigin={{vertical: 'top', horizontal: 'left'}}
           keepMounted
           transitionDuration={0}
           open={props.add}
           onClose={fns.close}
           sx = {{"& .MuiPopover-paper": {width: "200px"}}}
           >
           <Avatar1 variant="circular" src={data.avatar} alt={"Avatar"}   />
         </Popover>
       </Frame3>
       <AlertFilled variant="filled" severity={"error"}   > Description </AlertFilled>
         {(true) &&
           <Tooltip arrow={true} placement={"top"} componentsProps={{ tooltip: { sx: { maxWidth: "200px", }, } }} title={hello}>
           <ButtonContained variant="contained" size="large" color="primary"   loading={data.loading} disabled={data.disabled}  > Large </ButtonContained>
         </Tooltip>
       }
     </Frame11>
   );
}

export default Frame1;
